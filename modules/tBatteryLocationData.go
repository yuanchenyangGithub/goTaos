package tbatter

import (
	taos "disutaos/taos"
	"fmt"
	"strconv"
	"time"

	"github.com/tidwall/gjson"
)

type AutoGenerated struct {
	Direction int     `json:"direction"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
	Mobile    int64   `json:"mobile"`
	Speed     int     `json:"speed"`
	Time      int64   `json:"time"`
}

type TBatteryLocationData struct {
	Ts     string `json:"ts" form:"ts"`
	Mobile int64  `json:"mobile" form:"mobile"`
	// Altitude  int     `json:"altitude" form:"altitude"`
	Latitude  float64 `json:"latitude" form:"latitude"`
	Lat       float64 `json:"lat" form:"lat"`
	Longitude float64 `json:"longitude" form:"longitude"`
	Lng       float64 `json:"lng" form:"lng"`
	Speed     int     `json:"speed" form:"speed"`
	Spd       int     `json:"spd" form:"spd"`
	Direction int     `json:"direction" form:"direction"`
	Dir       int     `json:"dir" form:"dir"`
	Time      int64   `json:"time" form:"time"`
	// LocalTime string `json:"localTime" form:"localTime"`
}

func PostDevNewHistoryInfo(clientId int, startTime string, endTime string) (tBatteryLocationDataList []TBatteryLocationData, err error) {

	tBatteryLocationDataList = make([]TBatteryLocationData, 0)
	sqlStr := "select ts, mobile, latitude, latitude lat, longitude, longitude lng, speed, speed spd, direction, direction dir, info_time time FROM devDB.t_battery_location_data where mobile = " + strconv.Itoa(clientId) + " and info_time > " + startTime + " and info_time < " + endTime + " order by ts asc"
	fmt.Println(sqlStr)
	taos.CheckErr(err, sqlStr)
	res, err := taos.SqlDB.Query(sqlStr)
	defer res.Close()

	if err != nil {
		return
	}
	for res.Next() {
		var tBatteryLocationData TBatteryLocationData
		// Scan 方法会从输入端读取数据并将处理结果存入接收端，接收端必须是有效的指针。
		res.Scan(&tBatteryLocationData.Ts,
			&tBatteryLocationData.Mobile,
			// &tBatteryLocationData.Altitude,
			&tBatteryLocationData.Latitude,
			&tBatteryLocationData.Lat,
			&tBatteryLocationData.Longitude,
			&tBatteryLocationData.Lng,
			&tBatteryLocationData.Speed,
			&tBatteryLocationData.Spd,
			&tBatteryLocationData.Direction,
			&tBatteryLocationData.Dir,
			&tBatteryLocationData.Time)
		tBatteryLocationDataList = append(tBatteryLocationDataList, tBatteryLocationData)
	}
	return
}

// 多数据进行插入
func InsBatteryLocationData(temp []string) {

	// // 从kafka读取出来比较全的数据
	sqlStr := "insert into devDB.t_battery_location_data (ts, direction, latitude, longitude, mobile, speed, info_time) values"

	// // 进行拼接
	tagsql := ""

	for _, s := range temp {
		direction := gjson.Get(s, "direction")
		latitude := gjson.Get(s, "latitude")
		longitude := gjson.Get(s, "longitude")
		mobile := gjson.Get(s, "mobile")
		speed := gjson.Get(s, "speed")
		infoTime := gjson.Get(s, "time")

		tim := strconv.Itoa(int(time.Now().UnixNano() / 1e6))
		tagsql = tagsql + "(" + tim +
			"," + strconv.Itoa(int(direction.Num)) +
			"," + strconv.FormatFloat(latitude.Float(), 'f', 6, 64) +
			"," + strconv.FormatFloat(longitude.Float(), 'f', 6, 64) +
			"," + strconv.Itoa(int(mobile.Num)) +
			"," + strconv.Itoa(int(speed.Num)) +
			"," + strconv.Itoa(int(infoTime.Num)) + ")"

	}
	tt := sqlStr + tagsql
	// fmt.Println(tt)
	// // 执行插入
	_, err := taos.SqlDB.Exec(tt)
	if err != nil {
		fmt.Printf("INSERT failed: %v", err)
	}
	// count, err := res.RowsAffected()
	// fmt.Println("location", count)

}
